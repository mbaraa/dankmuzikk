package player

templ PlayerSticky(isMobile bool) {
	<div id="muzikk" class="hidden">
		if isMobile {
			@mobilePlayer()
		} else {
			@desktopPlayer()
		}
	</div>
	<div class="hidden">
		<div id="yt-player"></div>
		<audio
			id="audio-player"
			class="hidden"
			controls
			preload="none"
		></audio>
	</div>
	///
	<script lang="javascript">
        const playPauseIcons = {
            playDisabled: `<img src="/static/images/play-disabled-icon.svg" alt="Play"/>`,
            play: `<img src="/static/images/play-icon.svg" alt="Play"/>`,
            pauseDisabled: `<img src="/static/images/pause-disabled-icon.svg" alt="Pause"/>`,
            pause: `<img src="/static/images/pause-icon.svg" alt="Pause"/>`,
            loading: `<div class="loader !h-10 !w-10"></div>`,
        };

        const playPauseToggleEl = document.getElementById("play");
        const shuffleEl = document.getElementById("shuffle");
        const nextEl = document.getElementById("next");
        const prevEl = document.getElementById("prev");
        const songNameEl = document.getElementById("song-name");
        const artistNameEl = document.getElementById("artist-name");
        const songSeekBarEl = document.getElementById("song-seek-bar");
        const songDurationEl = document.getElementById("song-duration");
        const songCurrentTimeEl = document.getElementById("song-current-time");
        const songImageEl = document.getElementById("song-image");

        const audioPlayerEl = document.getElementById("audio-player");

        let currentTime = 0,
            duration = 0,
            currentAudio = {},
            paused = false;

        /*

	bind:this={player}
	on:loadeddata={handleLoad}
	on:timeupdate={handleUpdateTime}
	on:ended={handleFinishedSong}
	on:progress={() => {
		console.log("downloading...");
	}}
        */

        function setMediaSession(videoData) {
		    if ("mediaSession" in navigator) {
		    	navigator.mediaSession.metadata = new MediaMetadata({
		    		title:  videoData.title,
		    		artist: videoData.artist,
		    		album:  videoData.artist,
		    		artwork: [
		    			{
		    				src: videoData.thumbnailUrl,
		    				sizes: "96x96",
		    				type: "image/png"
		    			}
		    		]
		    	});

		    	navigator.mediaSession.setActionHandler("play", () => {
                    playPauseToggle();
		    	});
		    	navigator.mediaSession.setActionHandler("pause", () => {
                    playPauseToggle();
		    	});
		    	navigator.mediaSession.setActionHandler("stop", () => {
		    		audioPlayerEl.pause();
		    		audioPlayerEl.currentTime = 0;
                    document.getElementById("play").innerHTML = playPauseIcons.play;
		    	});
		    	navigator.mediaSession.setActionHandler("seekbackward", () => {
		    		let seekTo = -10;
		    		if (audioPlayerEl.currentTime + seekTo < 0) {
		    			seekTo = 0;
		    		}
		    		audioPlayerEl.currentTime += seekTo;
		    	});
		    	navigator.mediaSession.setActionHandler("seekforward", () => {
		    		let seekTo = +10;
		    		if (audioPlayerEl.currentTime + seekTo > duration) {
		    			seekTo = 0;
		    		}
		    		audioPlayerEl.currentTime += seekTo;
		    	});
		    	navigator.mediaSession.setActionHandler("seekto", (a) => {
		    		const seekTime = Number(a.seekOffset);
		    		audioPlayerEl.currentTime = seekTime;
		    	});
		    	navigator.mediaSession.setActionHandler("previoustrack", () => {
		    		//previous();
		    	});
		    	navigator.mediaSession.setActionHandler("nexttrack", () => {
		    		//next();
		    	});
		    }
	    }



        window.isPlayerReady = false;

        function playPauseToggle() {
		    if (audioPlayerEl.paused) {
                audioPlayerEl.play();
                document.getElementById("play").innerHTML = playPauseIcons.pause;
            } else {
                audioPlayerEl.pause();
                document.getElementById("play").innerHTML = playPauseIcons.play;
            }

        }

        let timeUpdateInterval;

        async function fetchMusic(youtubeId) {
            document.getElementById("play").innerHTML = playPauseIcons.loading;
            document.body.style.cursor = "progress";

            await fetch("/api/song/download/"+youtubeId)
                .then(res => console.log(res))
                .catch(err => console.error(err));

	    	if (audioPlayerEl) {
	    		audioPlayerEl.pause();
	    		audioPlayerEl.currentTime = 0;
	    		currentTime = 0;
	    	}
            document.getElementById("muzikk").style.display = "block";
	    	audioPlayerEl.src = `/music/${youtubeId}.mp3`;
	    	paused = false;
	    	audioPlayerEl.load();
//	    	currentAudio = music;
//	    	pageTitle = currentAudio.title + translate(TranslationKeys.TITLE_PLAYING_SUFFIX);
	    }


        function formatTime(timeSecs) {
            timeSecs = Math.floor(timeSecs);
            const ss = Math.floor(timeSecs % 60);
            const mm = Math.floor((timeSecs / 60) % 60);
            const hh = Math.floor((timeSecs / 60 / 60) % 60);

            return `${hh > 0 ? `${formatNumber(hh)}:` : ""}${formatNumber(mm)}:${formatNumber(ss)}`;
        }

        function formatNumber(n) {
    		return (n >= 10 ? "" : "0") + n.toString();
	    }

function getTextWidth() {
            return window.innerWidth > 768? 35: 15;
        }

        window.playYTSongById = async (id, thumbnailUrl, title, artist) => {
            const videoData = {id, thumbnailUrl, title, artist}
            // window.player.loadVideoById(videoId);
            await fetchMusic(videoData.id);
	    	setMediaSession(videoData);
            if (videoData.title) {
                songNameEl.innerHTML =  videoData.title;
                songNameEl.title = videoData.title;
                if (videoData.title.length > getTextWidth()) {
                    songNameEl.parentElement.classList.add("marquee");
                } else {
                    songNameEl.parentElement.classList.remove("marquee");
                }
            }
            if (videoData.artist) {
                artistNameEl.innerHTML = videoData.artist;
                artistNameEl.title = videoData.artist;
                if (videoData.artist.length > getTextWidth()) {
                    artistNameEl.parentElement.classList.add("marquee");
                } else {
                    artistNameEl.parentElement.classList.remove("marquee");
                }
            }

	    	audioPlayerEl.play();

            songImageEl.style.backgroundImage = `url("${videoData.thumbnailUrl}")`
        }

        document.getElementById("play").addEventListener("click", () => {
          playPauseToggle();
        });
        document.getElementById("next").addEventListener("click", () => {});
        document.getElementById("prev").addEventListener("click", () => {});
        songSeekBarEl.addEventListener("change", (event) => {
		    const seekTime = Number(event.target.value);
		    //const audio = document.getElementById("aud") as any;
		    audioPlayerEl.currentTime = seekTime;
		    //player = audio;
	    });

        audioPlayerEl.addEventListener("loadeddata", 	(event) => {
            playPauseToggleEl.disabled = null;
            shuffleEl.disabled = null;
            nextEl.disabled = null;
            prevEl.disabled = null;
            window.isPlayerReady = true;

            const duration = Math.ceil(Number.isNaN(event.target.duration)? 0: event.target.duration);
            songSeekBarEl.max = Math.ceil(duration);
            songSeekBarEl.value = 0;
            if (songDurationEl) {
                songDurationEl.innerHTML = formatTime(duration);
            }

            document.getElementById("play").innerHTML = playPauseIcons.pause;
            document.body.style.cursor = "auto";
		   // duration = a.duration;
	    });

        audioPlayerEl.addEventListener("timeupdate", (event) => {
		    const currentTime = Math.floor(event.target.currentTime);
            if (songCurrentTimeEl) {
                songCurrentTimeEl.innerHTML = formatTime(currentTime);
            }
            if (songSeekBarEl) {
                songSeekBarEl.value = Math.ceil(currentTime);
            }
        });

        audioPlayerEl.addEventListener("ended", (event) => {
            document.getElementById("play").innerHTML = playPauseIcons.play;
            audioPlayerEl.currentTime = 0;
        });

        audioPlayerEl.addEventListener("progress", (event) => {
            console.log("downloading...");
        });
    </script>
}
