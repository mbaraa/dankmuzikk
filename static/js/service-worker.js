"use strict";

// App registration

// Cache Name, modify to update cache
const CACHE_NAME = "static-cache-v1";

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const FILES_TO_CACHE = ["/", "/offline"];

// install
self.addEventListener("install", (evt) => {
  console.log("[ServiceWorker] Install");
  evt.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log("[ServiceWorker] Pre-caching offline page");
      return cache.addAll(FILES_TO_CACHE);
    }),
  );
  self.skipWaiting();
});

// Active PWA Cache and clear out anything older
self.addEventListener("activate", (evt) => {
  console.log("[ServiceWorker] Activate");
  evt.waitUntil(
    caches.keys().then((keyList) => {
      return Promise.all(
        keyList.map((key) => {
          if (key !== CACHE_NAME) {
            console.log("[ServiceWorker] Removing old cache", key);
            return caches.delete(key);
          }
        }),
      );
    }),
  );
  self.clients.claim();
});

// listen for fetch events in page navigation and return anything that has been
// cached
self.addEventListener("fetch", (evt) => {
  console.log("[ServiceWorker] Fetch", evt.request.url);
  // when not a navigation event return
  if (evt.request.mode !== "navigate") {
    return;
  }
  evt.respondWith(
    fetch(evt.request).catch(async () => {
      return caches.open(CACHE_NAME).then((cache) => {
        return cache.match("offline");
      });
    }),
  );
});
