package pages

import (
	"dankmuzikk/views/components/playlist"
	"dankmuzikk/entities"
	"dankmuzikk/views/components/popover"
	"dankmuzikk/views/icons"
	"fmt"
)

templ SearchResults(results []entities.Song, playlists []entities.Playlist, songsInPlaylists map[string]bool) {
	<main class={ "w-full", "h-full", "flex", "justify-center" }>
		<section
			class={
				"w-full", "md:w-3/4", "overflow-y-scroll", "max-h-[50vh]", "md:max-h-[75vh]",
				"bg-accent-trans-20", "backdrop-blur-sm", "rounded-md", "rounded-[10px]", "m-[10px]", "md:m-[20px]", "p-[5px]",
				"md:p-[20px]", "flex", "flex-col", "gap-y-3", "justify-between",
			}
		>
			if len(results) == 0 {
				<p class={ "md:w-[50dvh]", "text-center", "text-secondary", "text-xl" }>No results were found...</p>
			} else {
				for idx, res := range results {
					<div
						class={
							"!font-Ubuntu", "w-full", "bg-[#ffffff00]", "p-[12px]", "flex", "justify-between",
							"rounded-xl", "gap-x-2", "md:gap-x-5", "xl:gap-x-10",
						}
					>
						<div class={ "w-full", "flex", "gap-x-4", "md:gap-x-6" }>
							<!-- thumbnail and duration -->
							<div
								class={ "w-[80px]",  "h-[80px]", "md:w-[120px]", "md:h-[120px]", "relative", "cursor-pointer" }
								onClick={ playSong(res) }
							>
								<div
									class={
										"w-[80px]", "h-[80px]", "md:w-[120px]", "md:h-[120px]", "rounded-md", "bg-primary",
										"bg-repeat", "bg-cover", "bg-center", songThumb(fmt.Sprintf("url(\"%s\")", res.ThumbnailUrl)),
									}
								></div>
								<div class={ "absolute", "right-0", "bottom-0", "text-secondary", "text-sm", "md:text-md", "font-light", "m-2", "p-[6px]", "bg-accent-trans-30", "rounded-sm" }>
									<p class={ "leading-3", "font-Ubuntu" }>
										{ res.Duration }
									</p>
								</div>
							</div>
							<!-- title, channel title, and description -->
							<div class={ "w-[150px]", "md:w-[330px]", "lg:min-w-[500px]", "xl:min-w-[700px]" }>
								<div class={ "w-full", "h-full", "flex", "gap-y-3", "items-center", "flex-col",  "font-Ubuntu", "text-secondary" }>
									<h3
										class={ "w-full", "text-md", "md:text-lg", "font-bold", "cursor-pointer", "overflow-hidden", "text-nowrap", "text-ellipsis" }
										title={ res.Title }
										onClick={ playSong(res) }
									>
										{ res.Title }
									</h3>
									<p class={ "w-full", "text-sm", "font-normal" }>{ res.Artist }</p>
								</div>
							</div>
						</div>
						<!-- actions -->
						<div class={ "w-[30px]", "h-auto", "relative" }>
							@popover.Popover(res.YtId, "Song options", icons.Options(), searchSongOptions(idx, res, playlists, songsInPlaylists))
						</div>
					</div>
				}
			}
		</section>
	</main>
}

templ searchSongOptions(idx int, song entities.Song, playlists []entities.Playlist, songsInPlaylists map[string]bool) {
	<div class={ "p-2", "rounded-md", "bg-accent-trans-30", "backdrop-blur-xl", "min-w-[250px]", "text-secondary" }>
		@playlist.PlaylistsPopup(idx, song.YtId, playlists, songsInPlaylists)
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Add song to queue"
			type="button"
			onClick={ addSongToQueue(song) }
		>
			<img class={ "max-w-[30px]", "h-[25px]", "md:h-[30px]" } src="/static/icons/add-to-queue.svg" alt="Add song to queue"/>
			<span>Add to queue</span>
		</button>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Download song"
			type="button"
			onClick={ downloadSong(song.YtId, song.Title) }
		>
			<img class={ "max-w-[30px]", "h-[25px]", "md:h-[30px]" } src="/static/icons/download-icon.svg" alt="Download song"/>
			<span>Download to device</span>
		</button>
	</div>
}

script playSong(song entities.Song) {
    window.Player.playSingleSong(song);
}

script downloadSong(songYtId, songTitle string) {
    Player.downloadSongToDevice(songYtId, songTitle)
}

script addSongToQueue(song entities.Song) {
    window.Player.addSongToQueue(song);
}
