package pages

import (
	"dankmuzikk/entities"
	"fmt"
	"dankmuzikk/views/components/navlink"
	"dankmuzikk/views/components/popover"
)

templ Playlist(pl entities.Playlist) {
	<main class={ "w-full", "h-full", "lg:h-auto" }>
		<div class={ "flex", "justify-center" }>
			<section
				class={
					"w-full", "md:w-2/3", "bg-primary-trans-20", "backdrop-blur-md", "rounded-xl", "text-secondary",
					"rounded-[10px]", "m-[10px]", "md:m-[20px]", "p-[20px]", "md:p-[40px]",
					"mb-[170px]", "lg:mb-0",
				}
			>
				<div class={ "mb-4", "flex", "justify-between", "items-center" }>
					@navlink.LinkContainer("/playlists", "Playlists", backButton())
					if isOwner, ok := ctx.Value("is-playlist-owner").(bool); ok && isOwner {
						@publicPlaylistToggle(pl.PublicId, pl.IsPublic)
					} else {
						@joinLeavePlaylist(pl.PublicId)
					}
				</div>
				<div
					class={ "flex", "flex-col", "gap-y-4", "lg:gap-y-0", }
				>
					<div class={ "flex", "justify-between", "items-center", "w-full" }>
						<div class={ "flex", "flex-col", "gap-y-1" }>
							<h1 class={ "text-secondary", "text-3xl", "lg:text-4xl" }>{ pl.Title }</h1>
							<p class={ "text-secondary", "text-md" }>{ fmt.Sprint(pl.SongsCount) } Songs</p>
						</div>
						if pl.Songs != nil && len(pl.Songs) > 0 {
							<button
								type="button"
								title="Play playlist"
								onClick={ playPlaylist(pl) }
							><img src="/static/icons/play-playlist-icon.svg" alt="Play"/></button>
						}
					</div>
					<div id="playlists-listing">
						if pl.Songs == nil || len(pl.Songs) == 0 {
							<p>Hmm... This playlist looks empty, you can add songs from the search!</p>
						} else {
							<div
								class={
									"w-full", "overflow-y-scroll", "min-h-[40vh]", "max-h-[50vh]", "md:max-h-[65vh]",
									"flex", "flex-col", "gap-5", "lg:my-10",
								}
							>
								for _, song := range pl.Songs {
									<div
										class={
											"bg-secondary-trans-20", "rounded-[10px]", "p-2", "lg:p-5",
											"flex", "flex-row", "items-center", "gap-5", "justify-between",
										}
										id={ "song-" + song.YtId }
									>
										<div
											class={
												"w-[80px]", "h-[80px]", "lg:w-[125px]", "lg:h-[125px]", "rounded-md", "bg-accent", "cursor-pointer",
												songThumb(fmt.Sprintf("url(\"%s\")", song.ThumbnailUrl)), "bg-repeat", "bg-cover", "bg-center",
											}
											onClick={ playSongFromPlaylist(song.YtId, pl) }
										></div>
										<div class={ "w-11/12", "flex", "justify-between", "items-center" }>
											<div
												class={ "cursor-pointer", "flex", "flex-col", "lg:gap-2" }
												onClick={ playSongFromPlaylist(song.YtId, pl) }
											>
												<p class={ "text-lg", "max-w-[200px]", "md:max-w-[300px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>{ song.Title }</p>
												<p class={ "text-md", "max-w-[200px]", "md:max-w-[300px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>{ song.Artist }</p>
												if isMobile, ok := ctx.Value("is-mobile").(bool); ok && !isMobile {
													<p class={ "text-md", "max-w-[200px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Added on { song.AddedAt }</p>
													if song.PlayTimes == 1 {
														<p class={ "text-md", "max-w-[200px]", "md:max-w-[300px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played once</p>
													} else if song.PlayTimes > 1 {
														<p class={ "text-md", "max-w-[200px]", "md:max-w-[300px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played { fmt.Sprint( song.PlayTimes) } times</p>
													}
												}
											</div>
											<div>
												if isMobile, ok := ctx.Value("is-mobile").(bool); ok && isMobile {
													@popover.Popover(song.YtId, "Options", songOptionsToggle(), songOptionsMobile(song, pl.PublicId))
												} else {
													@popover.Popover(song.YtId, "Options", songOptionsToggle(), songOptions(song, pl.PublicId))
												}
											</div>
										</div>
									</div>
								}
							</div>
						}
					</div>
				</div>
			</section>
		</div>
	</main>
}

templ songOptionsToggle() {
	<svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
		<circle cx="10.5" cy="2.5" r="2.5" fill="var(--secondary-color)"></circle>
		<circle cx="10.5" cy="10.5" r="2.5" fill="var(--secondary-color)"></circle>
		<circle cx="10.5" cy="18.5" r="2.5" fill="var(--secondary-color)"></circle>
	</svg>
}

//if isMobile, ok := ctx.Value("is-mobile").(bool); ok && isMobile {
templ songOptions(song entities.Song, playlistId string) {
	<div
		class={
			"w-[250px]", "h-full", "bg-accent-trans-20", "p-[10px]", "rounded-[10px]",
			"flex", "flex-col", "gap-y-2", "backdrop-blur-lg",
		}
	>
		<h3 class={ "text-lg", "font-medium" }>Options</h3>
		<button
			class={
				"bg-primary", "hover:bg-secondary", "text-secondary", "hover:text-primary",
				"rounded-[5px]", "py-[5px]", "px-[10px]", "w-full",
			}
			title={ "Download " + song.Title + "!" }
			type="button"
			onClick={ downloadSong(song.YtId, song.Title) }
		>Download song</button>
		<button
			class={
				"bg-[#DE3333]", "hover:bg-secondary", "text-secondary", "hover:text-[#DE3333]",
				"rounded-[5px]", "py-[5px]", "px-[10px]", "w-full",
			}
			title={ "Remove " + song.Title + "!" }
			type="button"
			onClick={ removeSongFromPlaylist(song.YtId, playlistId) }
		>Remove from playlist</button>
	</div>
}

templ songOptionsMobile(song entities.Song, playlistId string) {
	<div
		class={
			"w-[250px]", "h-full", "bg-accent-trans-20", "p-[10px]", "rounded-[10px]",
			"flex", "flex-col", "gap-y-2", "backdrop-blur-lg",
		}
	>
		<h3 class={ "text-lg", "font-medium" }>Details and options</h3>
		<p class={ "text-md", "max-w-[200px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Added on { song.AddedAt }</p>
		if song.PlayTimes == 1 {
			<p class={ "text-md", "max-w-[200px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played once</p>
		} else if song.PlayTimes > 1 {
			<p class={ "text-md", "max-w-[200px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played { fmt.Sprint( song.PlayTimes) } times</p>
		}
		<button
			class={
				"bg-primary", "hover:bg-secondary", "text-secondary", "hover:text-primary",
				"rounded-[5px]", "py-[10px]", "px-[30px]", "w-full",
			}
			type="button"
			onClick={ downloadSong(song.YtId, song.Title) }
		>Download song</button>
		<button
			class={
				"bg-[#DE3333]", "hover:bg-secondary", "text-secondary", "hover:text-[#DE3333]",
				"rounded-[5px]", "py-[10px]", "px-[30px]", "w-full",
			}
			type="button"
			onClick={ removeSongFromPlaylist(song.YtId, playlistId) }
		>Remove from playlist</button>
	</div>
}

templ backButton() {
	<div class={ "flex", "gap-x-3", "items-center" }>
		<svg width="18" height="20" viewBox="0 0 18 20" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path d="M3.78462 12.9782C2.16532 11.9662 1.35578 11.4603 1.0781 10.8123C0.835619 10.2466 0.835619 9.60613 1.0781 9.04031C1.35578 8.3925 2.16532 7.88651 3.78462 6.87442L11.3899 2.12111C13.187 0.997903 14.0856 0.436243 14.8272 0.495963C15.4735 0.547923 16.066 0.876214 16.4527 1.39682C16.8962 1.99402 16.8962 3.05369 16.8962 5.17301L9.42289 9.89298L16.8962 14.6797C16.8962 16.799 16.8962 17.8586 16.4527 18.4558C16.066 18.9764 15.4735 19.3048 14.8272 19.3568C14.0856 19.4164 13.187 18.8548 11.3899 17.7316L3.78462 12.9782Z" stroke="var(--secondary-color)" stroke-linejoin="round"></path>
		</svg>
		<span>Playlists</span>
	</div>
}

templ publicPlaylistToggle(publicId string, isPublic bool) {
	<div
		class={ "flex", "gap-x-2", "items-center", "cursor-pointer" }
		hx-put={
			fmt.Sprintf(
				"/api/playlist/public?playlist-id=%s",
				publicId,
			),
		}
		hx-swap="innerHTML"
		hx-target={ fmt.Sprintf("#public-playlist-%s", publicId) }
		hx-trigger="click"
		data-loading-target="#loading"
		data-loading-class-remove="hidden"
		data-loading-path={
			fmt.Sprintf(
				"/api/playlist/public?playlist-id=%s", publicId,
			),
		}
	>
		<div
			id={ fmt.Sprintf("public-playlist-%s", publicId) }
		>
			<div
				class={
					"w-[20px]", "h-[20px]", "rounded-sm", "border", "border-secondary",
					map[string]bool{
						"bg-secondary": isPublic,
					},
				}
			></div>
		</div>
		<p class={ "max-w-[300px]", "text-secondary", "font-medium" }>
			Public
		</p>
	</div>
}

templ joinLeavePlaylist(publicId string) {
}

css songThumb(url string) {
	background-image: { url };
}

script playPlaylist(playlist entities.Playlist) {
    window.Player.playPlaylist(playlist)
}

script playSongFromPlaylist(songId string, playlist entities.Playlist) {
    window.Player.playSongFromPlaylist(songId, playlist)
}

script removeSongFromPlaylist(songId, playlistId string) {
    Utils.showLoading();
    fetch("/api/toggle-song-in-playlist?song-id=" + songId + "&playlist-id=" + playlistId + "&remove=true", {
        method: "PUT",
    })
    .then((res) => {
        if (res.ok) {
            document.getElementById("song-" + songId).remove();
            Player.removeSongFromPlaylist(songId);
        } else {
            window.alert("Oopsie something went wrong!");
        }
    })
    .catch((err) => {
        window.alert("Oopsie something went wrong!\n", err);
    })
    .finally(() => {
        Utils.hideLoading();
    });
}
