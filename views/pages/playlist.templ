package pages

import (
	"dankmuzikk/entities"
	"fmt"
	"dankmuzikk/views/components/navlink"
	"dankmuzikk/models"
	"dankmuzikk/views/components/playlist"
	"dankmuzikk/views/components/song"
)

templ Playlist(pl entities.Playlist) {
	<main class={ "w-full", "h-full", "lg:h-auto" }>
		<div class={ "flex", "justify-center" }>
			<section
				class={
					"w-full", "md:w-3/4", "bg-primary-trans-20", "backdrop-blur-md", "rounded-xl", "text-secondary",
					"rounded-[10px]", "m-[10px]", "md:m-[20px]", "p-[20px]", "md:p-[40px]",
					"mb-[170px]", "lg:mb-0",
				}
			>
				<div class={ "mb-4", "flex", "justify-between", "items-center" }>
					@navlink.LinkContainer("/playlists", "Playlists", backButton())
					<div class={ "flex", "gap-x-2", "items-center" }>
						<button
							class={
								"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
								"flex", "justify-center", "items-center",
							}
							title="Copy link to this playlist"
							type="button"
							onClick={ copyLink(pl.PublicId, pl.IsPublic) }
						><img class={ "max-w-[25px]", "h-[20px]", "md:h-[25px]" } src="/static/icons/share-icon.svg" alt="Share"/> </button>
						if perm, ok := ctx.Value("playlist-permission").(models.PlaylistPermissions); ok && (perm & models.OwnerPermission) != 0 {
							@playlist.PlaylistsOptionsPopover(pl)
						} else {
							@joinLeavePlaylist(pl.PublicId, perm)
						}
					</div>
				</div>
				<div
					class={ "flex", "flex-col", "gap-y-4", "lg:gap-y-0", }
				>
					<div class={ "flex", "justify-between", "items-center", "w-full" }>
						<div class={ "flex", "flex-col", "gap-y-1" }>
							<h1 class={ "text-secondary", "text-3xl", "lg:text-4xl" }>{ pl.Title }</h1>
							<p class={ "text-secondary", "text-md" }>{ fmt.Sprint(pl.SongsCount) } Songs</p>
						</div>
						if pl.Songs != nil && len(pl.Songs) > 0 {
							<button
								type="button"
								title="Play playlist"
								onClick={ playSongFromPlaylist(pl.Songs[0].YtId, pl) }
							><img src="/static/icons/play-playlist-icon.svg" alt="Play"/></button>
						}
					</div>
					<div id="playlists-listing">
						if pl.Songs == nil || len(pl.Songs) == 0 {
							<p>Hmm... This playlist looks empty, you can add songs from the search!</p>
						} else {
							<div
								class={
									"w-full", "overflow-y-scroll", "min-h-[40vh]", "max-h-[50vh]", "md:max-h-[65vh]",
									"flex", "flex-col", "gap-y-1", "lg:gap-y-4", "lg:my-10",
								}
							>
								for _, s := range pl.Songs {
									if isMobile, ok := ctx.Value("is-mobile").(bool); ok && isMobile {
										@song.Song(s, []string{}, []templ.Component{songOptionsMobile(s, pl.PublicId)}, playSongFromPlaylist(s.YtId, pl))
									} else {
										@song.Song(
											s,
											[]string{
												playedTimes(s.PlayTimes),
												"Added on " + s.AddedAt,
											},
											[]templ.Component{
												removeSong(s, pl.PublicId),
											},
											playSongFromPlaylist(s.YtId, pl),
											false,
										)
									}
								}
							</div>
						}
					</div>
				</div>
			</section>
		</div>
	</main>
	<input id="clipboard-text-blyat" type="text" hidden/>
}

templ removeSong(song entities.Song, playlistId string) {
	if perm, ok := ctx.Value("playlist-permission").(models.PlaylistPermissions); ok && (perm & models.JoinerPermission) != 0 {
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-[#DE3333]", "text-secondary",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title={ "Remove " + song.Title + "!" }
			type="button"
			onClick={ removeSongFromPlaylist(song.YtId, playlistId) }
		>
			<svg width="30" height="34" viewBox="0 0 30 34" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M11.6129 14.8387V24.5161" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M18.0647 14.8387V24.5161" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M1.93555 8.38712H27.742" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M5.16125 8.38712H14.8387H24.5161V26.129C24.5161 28.8015 22.3498 30.9678 19.6774 30.9678H9.99996C7.32763 30.9678 5.16125 28.8015 5.16125 26.129V8.38712Z" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M10 5.16128C10 3.37971 11.4442 1.93547 13.2258 1.93547H16.4516C18.2332 1.93547 19.6774 3.37971 19.6774 5.16128V8.38708H10V5.16128Z" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
			</svg>
			<span>Remove from playlist</span>
		</button>
	}
}

templ songOptionsMobile(song entities.Song, playlistId string) {
	<div
		class={ "w-[250px]", "h-full", "flex", "flex-col", "gap-y-2", }
	>
		<h3 class={ "text-lg", "font-medium" }>Details and options</h3>
		<p class={ "text-md", "max-w-[200px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Added on { song.AddedAt }</p>
		if song.PlayTimes == 1 {
			<p class={ "text-md", "max-w-[200px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played once</p>
		} else if song.PlayTimes > 1 {
			<p class={ "text-md", "max-w-[200px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played { fmt.Sprint( song.PlayTimes) } times</p>
		}
		@removeSong(song, playlistId)
	</div>
}

templ backButton() {
	<div class={ "flex", "gap-x-3", "items-center" }>
		<svg width="18" height="20" viewBox="0 0 18 20" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path d="M3.78462 12.9782C2.16532 11.9662 1.35578 11.4603 1.0781 10.8123C0.835619 10.2466 0.835619 9.60613 1.0781 9.04031C1.35578 8.3925 2.16532 7.88651 3.78462 6.87442L11.3899 2.12111C13.187 0.997903 14.0856 0.436243 14.8272 0.495963C15.4735 0.547923 16.066 0.876214 16.4527 1.39682C16.8962 1.99402 16.8962 3.05369 16.8962 5.17301L9.42289 9.89298L16.8962 14.6797C16.8962 16.799 16.8962 17.8586 16.4527 18.4558C16.066 18.9764 15.4735 19.3048 14.8272 19.3568C14.0856 19.4164 13.187 18.8548 11.3899 17.7316L3.78462 12.9782Z" stroke="var(--secondary-color)" stroke-linejoin="round"></path>
		</svg>
		<span>Playlists</span>
	</div>
}

templ joinLeavePlaylist(publicId string, perm models.PlaylistPermissions) {
	<div
		class={ "flex", "gap-x-2", "items-center", "cursor-pointer" }
		hx-put={
			fmt.Sprintf(
				"/api/playlist/join?playlist-id=%s",
				publicId,
			),
		}
		hx-swap="innerHTML"
		hx-target={ fmt.Sprintf("#join-playlist-%s", publicId) }
		hx-trigger="click"
		data-loading-target="#loading"
		data-loading-class-remove="hidden"
		data-loading-path={
			fmt.Sprintf(
				"/api/playlist/join?playlist-id=%s", publicId,
			),
		}
	>
		<p class={ "max-w-[300px]", "text-secondary", "font-medium" }>
			<button
				class={
					"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
					"flex", "justify-center", "items-center",
				}
				type="submit"
				id={ fmt.Sprintf("join-playlist-%s", publicId) }
			>
				if (perm & models.JoinerPermission) != 0 {
					Leave playlist
				} else {
					Join playlist
				}
			</button>
		</p>
	</div>
}

css songThumb(url string) {
	background-image: { url };
}

func playedTimes(times int) string {
	if times == 1 {
		return "Played once"
	} else {
		return fmt.Sprintf("Played %d times", times)
	}
}

script playSongFromPlaylist(songId string, playlist entities.Playlist) {
    window.Player.playSongFromPlaylist(songId, playlist)
}

script removeSongFromPlaylist(songId, playlistId string) {
    Player.removeSongFromPlaylist(songId, playlistId);
}

script copyLink(pubId string, isPublic bool) {
    const textArea = document.getElementById("clipboard-text-blyat");
    textArea.hidden = false;
    textArea.value = location.href;
    textArea.select();
    textArea.setSelectionRange(0, 300);
    document.execCommand("copy");
    textArea.hidden = true;
    if (isPublic) {
        alert("Playlist's links was copied!");
    } else {
        alert("Playlist's links was copied!\nMake sure to make it public before sharing the link üòÅ")
    }
}
