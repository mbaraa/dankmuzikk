package themeswitch

var themes = []struct {
	displayName string
	actualName  string
}{
	{
		displayName: "Default",
		actualName:  "default",
	},
	{
		displayName: "Black",
		actualName:  "black",
	},
}

templ ThemeSwitch() {
	<div class={ "theme-toggle-container", "relative" }>
		<button
			onClick={ toggleTheThing() }
			class={ "p-2", "rounded-md", "hover:bg-accent-trans-20" }
		>
			<img src="/static/images/theme-icon.svg" alt="Theme Selector"/>
		</button>
		<div
			id="theme-selector"
			class={
				"hidden", "absolute", "z-30", "top-[35px]", "right-[0px]",
				"bg-secondary-trans-20", "backdrop-blur-md", "shadow-md", "p-[10px]", "rounded-[5px]",
				"min-w-[150px]", "text-secondary",
			}
		>
			<ul class={ "text-secondary" }>
				for _, theme := range themes {
					<li>
						<button
							onClick={ changeTheme(theme.actualName) }
							type="button"
							class={ "w-full", "p-2", "rounded-md", "hover:bg-accent-trans-20", "text-left" }
						>{ theme.displayName }</button>
					</li>
				}
			</ul>
		</div>
	</div>
}

script changeTheme(themeName string) {
    const themeCookie = "theme-name";
    document.cookie = "theme-name" + "=" + themeName + "; path=/";

    const themes = {
        default: {
            primary: "#4c8c36",
            primary20: "#4c8c3633",
            secondary: "#ffffff",
            secondary20: "#ffffff33",
            accent: "#000000",
            accent20: "#00000033",
            accent30: "#0000004c",
            accent69: "#000000b0",
            bg: "/static/images/dankground.svg",
        },
        black: {
            primary: "#000000",
            primary20: "#00000033",
            secondary: "#ffffff",
            secondary20: "#ffffff33",
            accent: "#D3FCBF",
            accent20: "#D3FCBF33",
            accent30: "#D3FCBF4c",
            accent69: "#D3FCBFb0",
            bg: "/static/images/dankground-dark.svg",
        },
    };

    const style = document.documentElement.style;
    const theme = themes[themeName];
    if (!theme) {
        window.location.reload();
        return;
    }

    style.setProperty('--primary-color', theme.primary);
    style.setProperty('--primary-color-20', theme.primary20);
    style.setProperty('--secondary-color', theme.secondary);
    style.setProperty('--secondary-color-20', theme.secondary20);
    style.setProperty('--accent-color', theme.accent);
    style.setProperty('--accent-color-20', theme.accent20);
    style.setProperty('--accent-color-30', theme.accent30);
    style.setProperty('--accent-color-69', theme.accent69);
    document.body.style.backgroundImage = `url('${theme.bg}'), linear-gradient(to right, var(--accent-color), var(--secondary-color))`;
    document.getElementById("theme-selector").style.display = "none";
}

script toggleTheThing() {
    const themeTogglePopover = document.getElementById("theme-selector");

    if (themeTogglePopover.style.display !== "block") {
      themeTogglePopover.style.display = "block";
    } else {
      themeTogglePopover.style.display = "none";
    }
}
