package pages

import (
	"dankmuzikk/entities"
	"fmt"
	"dankmuzikk/views/components/navlink"
	"dankmuzikk/models"
	"dankmuzikk/views/components/playlist"
	"dankmuzikk/views/components/song"
	"dankmuzikk/views/components/page"
	"dankmuzikk/views/icons"
)

templ Playlist(pl entities.Playlist) {
	@page.Container(playlistHeader(pl), playlistContent(pl))
}

templ playlistHeader(pl entities.Playlist) {
	<div class={ "mb-4", "flex", "justify-between", "items-center" }>
		@navlink.LinkContainer("/playlists", "Playlists", backButton())
		<div class={ "flex", "gap-x-2", "items-center" }>
			<button
				class={
					"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
					"flex", "justify-center", "items-center",
				}
				title="Copy link to this playlist"
				type="button"
				onClick={ copyLink(pl.IsPublic) }
			>
				@icons.ShareLink()
			</button>
			if perm, ok := ctx.Value("playlist-permission").(models.PlaylistPermissions); ok && (perm & models.OwnerPermission) != 0 {
				@playlist.PlaylistsOptionsPopover(pl)
			} else {
				@joinLeavePlaylist(pl.PublicId, perm)
			}
		</div>
	</div>
	<div class={ "flex", "justify-between", "items-center", "w-full" }>
		<div class={ "flex", "flex-col", "gap-y-1" }>
			<h1 class={ "text-secondary", "text-3xl", "lg:text-4xl" }>{ pl.Title }</h1>
			<p class={ "text-secondary", "text-md" }>{ fmt.Sprint(pl.SongsCount) } Songs</p>
		</div>
		if pl.Songs != nil && len(pl.Songs) > 0 {
			<button
				id="play-playlist-button"
				type="button"
				title="Play playlist"
				onClick={ playSongFromPlaylist(pl.Songs[0].YtId, pl) }
			>
				@icons.PlayPlaylist()
			</button>
		}
	</div>
}

templ playlistContent(pl entities.Playlist) {
	<div id="playlists-listing">
		if pl.Songs == nil || len(pl.Songs) == 0 {
			<p>Hmm... This playlist looks empty, you can add songs from the search!</p>
		} else {
			<div
				class={
					"w-full", "overflow-y-scroll", "max-h-[55vh]", "md:max-h-[65vh]",
					"flex", "flex-col", "gap-y-1",
				}
			>
				for idx, s := range pl.Songs {
					if isMobile, ok := ctx.Value("is-mobile").(bool); ok && isMobile {
						@song.Song(
							s,
							[]string{},
							[]templ.Component{
								songOptionsMobile(s),
								voteSong(s.YtId, pl.PublicId, s.Votes),
								removeSong(s, pl.PublicId),
								playlist.PlaylistsPopup(idx, s.YtId),
							},
							pl,
						)
					} else {
						@song.Song(
							s,
							[]string{
								playedTimes(s.PlayTimes),
								"Added on " + s.AddedAt,
							},
							[]templ.Component{
								voteSong(s.YtId, pl.PublicId, s.Votes),
								removeSong(s, pl.PublicId),
								playlist.PlaylistsPopup(idx, s.YtId),
							},
							pl,
						)
					}
				}
			</div>
		}
	</div>
}

templ removeSong(song entities.Song, playlistId string) {
	if perm, ok := ctx.Value("playlist-permission").(models.PlaylistPermissions); ok && (perm & models.JoinerPermission) != 0 {
		<button
			class={
				"popover-trigger", "p-1", "rounded-md", "hover:bg-[#DE3333]", "text-secondary", "hover:text-white",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title={ "Remove " + song.Title + "!" }
			type="button"
			onClick={ removeSongFromPlaylist(song.YtId, playlistId) }
		>
			<svg class={ "hover:stroke-white" } width="30" height="34" viewBox="0 0 30 34" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M11.6129 14.8387V24.5161" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M18.0647 14.8387V24.5161" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M1.93555 8.38712H27.742" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M5.16125 8.38712H14.8387H24.5161V26.129C24.5161 28.8015 22.3498 30.9678 19.6774 30.9678H9.99996C7.32763 30.9678 5.16125 28.8015 5.16125 26.129V8.38712Z" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				<path d="M10 5.16128C10 3.37971 11.4442 1.93547 13.2258 1.93547H16.4516C18.2332 1.93547 19.6774 3.37971 19.6774 5.16128V8.38708H10V5.16128Z" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
			</svg>
			<span>Remove from playlist</span>
		</button>
	}
}

templ songOptionsMobile(song entities.Song) {
	<div
		class={ "w-[250px]", "h-full", "flex", "flex-col", "gap-y-2", "p-2" }
	>
		<h3 class={ "text-lg", "font-medium" }>Details and options</h3>
		<p class={ "text-md", "max-w-[200px]", "lg:max-w-[600px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Added on { song.AddedAt }</p>
		if song.PlayTimes == 1 {
			<p class={ "text-md", "max-w-[200px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played once</p>
		} else if song.PlayTimes > 1 {
			<p class={ "text-md", "max-w-[200px]", "overflow-hidden", "text-nowrap", "text-ellipsis" }>Played { fmt.Sprint( song.PlayTimes) } times</p>
		}
	</div>
	<hr/>
}

templ voteSong(songId, playlistId string, votes int) {
	<h3 class={ "ps-2", "md:ps-0", "mb-2", "md:mb-0", "w-full", "text-start", "md:text-center", "text-md", "md:text-xl",  "md:font-medium" }>Votes</h3>
	<div class={ "w-full", "flex", "gap-x-2", "justify-between" }>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full", "justify-center",
			}
			title="Downvote song"
			type="button"
			hx-put={
				fmt.Sprintf(
					"/api/song/playlist/downvote?song-id=%s&playlist-id=%s",
					songId, playlistId,
				),
			}
			hx-swap="innerHTML"
			hx-target={ fmt.Sprintf("#votes-%s", songId) }
			hx-trigger="click"
			data-loading-target="#loading"
			data-loading-class-remove="hidden"
			data-loading-path={
				fmt.Sprintf(
					"/api/song/playlist/downvote?song-id=%s&playlist-id=%s",
					songId, playlistId,
				),
			}
		>
			// dv
			<svg width="32" height="28" viewBox="0 0 32 28" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M20.0449 21.0084C18.5824 23.3558 17.8511 24.5294 16.9148 24.9319C16.0972 25.2834 15.1716 25.2834 14.3539 24.9319C13.4177 24.5293 12.6865 23.3557 11.224 21.0082L4.35499 9.98268C2.73185 7.37729 1.92019 6.07459 2.00652 4.99958C2.08164 4.06254 2.55609 3.20359 3.30846 2.6431C4.17152 2.00008 5.70289 2.00011 8.76564 2.00019L15.5864 12.8345L22.5042 2.00051C25.5669 2.00058 27.0982 2.00062 27.9613 2.64368C28.7136 3.20421 29.1882 4.06318 29.2633 5.00023C29.3494 6.07524 28.5377 7.37791 26.9144 9.98322L20.0449 21.0084Z" stroke="white" stroke-width="4" stroke-linejoin="round"></path>
			</svg>
		</button>
		<span id={ "votes-" + songId } class={ "font-bold", "text-2xl", "text-secondary","flex", "items-center", "justify-center", "w-6" }>{ fmt.Sprint(votes) }</span>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full", "justify-center",
			}
			title="Upvote song"
			type="button"
			hx-put={
				fmt.Sprintf(
					"/api/song/playlist/upvote?song-id=%s&playlist-id=%s",
					songId, playlistId,
				),
			}
			hx-swap="innerHTML"
			hx-target={ fmt.Sprintf("#votes-%s", songId) }
			hx-trigger="click"
			data-loading-target="#loading"
			data-loading-class-remove="hidden"
			data-loading-path={
				fmt.Sprintf(
					"/api/song/playlist/upvote?song-id=%s&playlist-id=%s",
					songId, playlistId,
				),
			}
		>
			// uv
			<svg width="32" height="28" viewBox="0 0 32 28" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M11.2242 6.18728C12.6867 3.83978 13.4179 2.66619 14.3542 2.26364C15.1718 1.91212 16.0974 1.91212 16.9151 2.26364C17.8513 2.66619 18.5825 3.83978 20.0451 6.18728L26.9144 17.2126C28.5376 19.8179 29.3492 21.1206 29.2629 22.1956C29.1878 23.1327 28.7134 23.9916 27.9611 24.5521C27.098 25.1952 25.5666 25.1952 22.5039 25.1952L15.6828 14.3611L8.76537 25.1952C5.70265 25.1952 4.17131 25.1952 3.30822 24.5521C2.55589 23.9916 2.08131 23.1327 2.00621 22.1956C1.92007 21.1206 2.73168 19.8179 4.35492 17.2126L11.2242 6.18728Z" stroke="white" stroke-width="4" stroke-linejoin="round"></path>
			</svg>
		</button>
	</div>
}

templ backButton() {
	<div class={ "flex", "gap-x-3", "items-center" }>
		<svg width="18" height="20" viewBox="0 0 18 20" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path d="M3.78462 12.9782C2.16532 11.9662 1.35578 11.4603 1.0781 10.8123C0.835619 10.2466 0.835619 9.60613 1.0781 9.04031C1.35578 8.3925 2.16532 7.88651 3.78462 6.87442L11.3899 2.12111C13.187 0.997903 14.0856 0.436243 14.8272 0.495963C15.4735 0.547923 16.066 0.876214 16.4527 1.39682C16.8962 1.99402 16.8962 3.05369 16.8962 5.17301L9.42289 9.89298L16.8962 14.6797C16.8962 16.799 16.8962 17.8586 16.4527 18.4558C16.066 18.9764 15.4735 19.3048 14.8272 19.3568C14.0856 19.4164 13.187 18.8548 11.3899 17.7316L3.78462 12.9782Z" stroke="var(--secondary-color)" stroke-linejoin="round"></path>
		</svg>
		<span>Playlists</span>
	</div>
}

templ joinLeavePlaylist(publicId string, perm models.PlaylistPermissions) {
	<div
		class={ "flex", "gap-x-2", "items-center", "cursor-pointer" }
		hx-put={
			fmt.Sprintf(
				"/api/playlist/join?playlist-id=%s",
				publicId,
			),
		}
		hx-swap="innerHTML"
		hx-target={ fmt.Sprintf("#join-playlist-%s", publicId) }
		hx-trigger="click"
		data-loading-target="#loading"
		data-loading-class-remove="hidden"
		data-loading-path={
			fmt.Sprintf(
				"/api/playlist/join?playlist-id=%s", publicId,
			),
		}
	>
		<p class={ "max-w-[300px]", "text-secondary", "font-medium" }>
			<button
				class={
					"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
					"flex", "justify-center", "items-center",
				}
				type="submit"
				id={ fmt.Sprintf("join-playlist-%s", publicId) }
			>
				if (perm & models.JoinerPermission) != 0 {
					Leave playlist
				} else {
					Join playlist
				}
			</button>
		</p>
	</div>
}

css songThumb(url string) {
	background-image: { url };
}

func playedTimes(times int) string {
	switch {
	case times == 1:
		return "Played once"
	case times > 1:
		return fmt.Sprintf("Played %d times", times)
	default:
		return ""
	}
}

script removeSongFromPlaylist(songId, playlistId string) {
    Player.removeSongFromPlaylist(songId, playlistId);
}

script copyLink(isPublic bool) {
    window.Utils.copyTextToClipboard(location.href)
    if (isPublic) {
        alert("Playlist's links was copied!");
    } else {
        alert("Playlist's links was copied!\nMake sure to make it public before sharing the link 😁")
    }
}

script playSongFromPlaylist(songId string, playlist entities.Playlist) {
    window.Player.playSongFromPlaylist(songId, playlist)
}
