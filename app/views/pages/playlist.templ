package pages

import (
	"dankmuzikk/entities"
	"fmt"
	"dankmuzikk/views/components/navlink"
	"dankmuzikk/views/components/playlist"
	"dankmuzikk/views/components/song"
	"dankmuzikk/views/components/page"
	"dankmuzikk/views/icons"
	"dankmuzikk/views/components/ui"
)

templ Playlist(pl entities.Playlist) {
	@page.Container(playlistHeader(pl), playlistContent(pl))
}

templ playlistHeader(pl entities.Playlist) {
	<div class={ "mb-4", "flex", "justify-between", "items-center" }>
		@navlink.LinkContainer("/playlists", "Playlists", backButton())
		<div class={ "flex", "gap-x-2", "items-center" }>
			@playlist.PlaylistsOptions(pl)
		</div>
	</div>
	<div class={ "flex", "justify-between", "items-center", "w-full" }>
		<div class={ "flex", "flex-col", "gap-y-1" }>
			<h1 class={ "text-secondary", "text-3xl", "lg:text-4xl" }>{ pl.Title }</h1>
			<p class={ "text-secondary", "text-md" }>{ fmt.Sprint(pl.SongsCount) } Songs</p>
		</div>
		if pl.Songs != nil && len(pl.Songs) > 0 {
			<button
				id="play-playlist-button"
				type="button"
				title="Play playlist"
				onClick={ playSongFromPlaylist(pl.Songs[0].YtId, pl.PublicId) }
			>
				@icons.PlayPlaylist()
			</button>
		}
	</div>
}

templ playlistContent(pl entities.Playlist) {
	<div id="playlists-listing">
		if pl.Songs == nil || len(pl.Songs) == 0 {
			<p>Hmm... This playlist looks empty, you can add songs from the search!</p>
		} else {
			<div
				class={
					"w-full", "overflow-y-scroll", "max-h-[55vh]", "md:max-h-[65vh]",
					"flex", "flex-col", "gap-y-1",
				}
			>
				for idx, s := range pl.Songs {
					@ui.MobileOnly() {
						@song.Song(
							s,
							[]string{},
							[]templ.Component{
								song.DetailsMobile(s),
								song.Vote(s.YtId, pl.PublicId, s.Votes),
								song.RemoveSong(s, pl.PublicId),
								playlist.PlaylistsPopup(idx, s.YtId),
							},
							pl,
						)
					}
					@ui.DesktopOnly() {
						@song.Song(
							s,
							[]string{
								playedTimes(s.PlayTimes),
								"Added on " + s.AddedAt,
							},
							[]templ.Component{
								song.Vote(s.YtId, pl.PublicId, s.Votes),
								song.RemoveSong(s, pl.PublicId),
								playlist.PlaylistsPopup(idx, s.YtId),
							},
							pl,
						)
					}
				}
			</div>
		}
	</div>
}

templ backButton() {
	<div class={ "flex", "gap-x-3", "items-center" }>
		<svg width="18" height="20" viewBox="0 0 18 20" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path d="M3.78462 12.9782C2.16532 11.9662 1.35578 11.4603 1.0781 10.8123C0.835619 10.2466 0.835619 9.60613 1.0781 9.04031C1.35578 8.3925 2.16532 7.88651 3.78462 6.87442L11.3899 2.12111C13.187 0.997903 14.0856 0.436243 14.8272 0.495963C15.4735 0.547923 16.066 0.876214 16.4527 1.39682C16.8962 1.99402 16.8962 3.05369 16.8962 5.17301L9.42289 9.89298L16.8962 14.6797C16.8962 16.799 16.8962 17.8586 16.4527 18.4558C16.066 18.9764 15.4735 19.3048 14.8272 19.3568C14.0856 19.4164 13.187 18.8548 11.3899 17.7316L3.78462 12.9782Z" stroke="var(--secondary-color)" stroke-linejoin="round"></path>
		</svg>
		<span>Playlists</span>
	</div>
}

css songThumb(url string) {
	background-image: { url };
}

func playedTimes(times int) string {
	switch {
	case times == 1:
		return "Played once"
	case times > 1:
		return fmt.Sprintf("Played %d times", times)
	default:
		return ""
	}
}

script copyLink(isPublic bool) {
    window.Utils.copyTextToClipboard(location.href)
    if (isPublic) {
        alert("Playlist's links was copied!");
    } else {
        alert("Playlist's links was copied!\nMake sure to make it public before sharing the link üòÅ")
    }
}

script playSongFromPlaylist(songId, playlistPubId string) {
    window.Player.playSongFromPlaylistId(songId, playlistPubId)
}
