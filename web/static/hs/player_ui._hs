def expandMobilePlayer
    if <#ze-player.expanded/> is empty then
        add .exapnded to #ze-player then
        add .hidden to #ze-collapsed-mobile-player then
        remove .hidden from #ze-expanded-mobile-player
    end
end

def collapseMobilePlayer
    if <#ze-player.expanded/> is empty then
        remove .exapnded from #ze-player then
        remove .hidden from #ze-collapsed-mobile-player then
        add .hidden to #ze-expanded-mobile-player
    end
end

def setPlayerLoadingOn()
    set body's *cursor to "progress" then
    set #play's innerHTML to PlayerIcons.loading
    set #play-expand's innerHTML to PlayerIcons.loading
end

def setPlayerLoadingOff()
    set body's *cursor to "auto" then
    set #play's innerHTML to PlayerIcons.pause
    set #play-expand's innerHTML to PlayerIcons.pause
end

def enablePlayerButtons()
    remove @disabled from #play then
    remove @disabled from #play-expand then
    if #shuffle is not null then
        remove @disabled from #shuffle then
    end
    if #loop is not null then
        remove @disabled from #loop then
    end
    if #next is not null then
        remove @disabled from #next then
    end
    if #next-expand is not null then
        remove @disabled from #next-expand then
    end
    if #prev is not null then
        remove @disabled from #prev then
    end
    if #prev-expand is not null then
        remove @disabled from #prev-expand then
    end
end

def formatNumber(n)
    if n >= 10 then
        return n.toString()
    else
        return `0${n}`
    end
end

def formatTime(secs)
    put Math.floor(secs) into secs then
    set ss to Math.floor(secs mod 60) then
    set mm to Math.floor((secs / 60) mod 60) then
    set hh to Math.floor((secs / 60 / 60) mod 60) then
    set timeStr to "" then

    if hh > 0 then
        append formatNumber(hh) + ":" to timeStr
    end
    append formatNumber(mm) + ":" to timeStr
    append formatNumber(ss) to timeStr

    return timeStr
end

def setPlayingSongDuration(dur)
    if Number.isNaN(dur) or not Number.isFinite(dur) then
        set dur to 0
    end
    set #song-seek-bar's max to Math.ceil(dur) then
    set #song-seek-bar's value to 0 then
    if #song-seek-bar-expanded is not null then
        set #song-seek-bar-expanded's max to Math.ceil(dur) then
        set #song-seek-bar-expanded's value to 0 then
    end
    if #song-duration is not null then
        set #song-duration's innerText to formatTime(dur)
    end
    if #song-duration-expanded is not null then
        set #song-duration-expanded's innerText to formatTime(dur)
    end
end

def setPlayingSongCurrentTime(time)
    put Math.floor(time) into time
    if #song-current-time is not null then
        set #song-current-time's innerText to formatTime(time)
    end
    if #song-current-time-expanded is not null then
        set #song-current-time-expanded's innerText to formatTime(time)
    end
    if #song-seek-bar is not null then
        set #song-seek-bar's value to Math.ceil(time)
    end
    if #song-seek-bar-expanded is not null then
        set #song-seek-bar-expanded's value to Math.ceil(time)
    end
end
