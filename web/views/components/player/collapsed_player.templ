package player

import (
	"context"
	"dankmuzikk-web/actions"
	"dankmuzikk-web/views/components/menus"
	"dankmuzikk-web/views/components/ui"
	"dankmuzikk-web/views/icons"
	"fmt"
	"strconv"
	"time"
)

func ps(ctx context.Context) actions.PlayerState {
	state, ok := ctx.Value("player-state").(actions.PlayerState)
	if !ok {
		return actions.PlayerState{}
	}

	return state
}

func checkPlayerState(state actions.PlayerState) bool {
	return len(state.Songs) > 0
}

func psShuffled(state actions.PlayerState) bool {
	return state.Shuffled
}

func psLoopMode(state actions.PlayerState) string {
	return state.LoopMode
}

func checkPlayerStateForSong(state actions.PlayerState) bool {
	return checkPlayerState(state) && state.CurrentSongIndex < len(state.Songs)
}

func psSongName(state actions.PlayerState, fallback string) string {
	if checkPlayerStateForSong(state) {
		return state.Songs[state.CurrentSongIndex].Title
	} else {
		return fallback
	}
}

func psArtistName(state actions.PlayerState, fallback string) string {
	if checkPlayerStateForSong(state) {
		return state.Songs[state.CurrentSongIndex].Artist
	} else {
		return fallback
	}
}

func psDuration(state actions.PlayerState, fallback string) string {
	if checkPlayerStateForSong(state) {
		return strconv.Itoa(int(state.Songs[state.CurrentSongIndex].RealDuration / time.Second))
	} else {
		return fallback
	}
}

func psDurationStr(state actions.PlayerState, fallback string) string {
	if checkPlayerStateForSong(state) {
		return state.Songs[state.CurrentSongIndex].Duration()
	} else {
		return fallback
	}
}

func psMediaUrl(state actions.PlayerState, fallback string) string {
	if checkPlayerStateForSong(state) {
		return state.Songs[state.CurrentSongIndex].MediaUrl
	} else {
		return fallback
	}
}

func psThumnailUrl(state actions.PlayerState, fallback string) string {
	if checkPlayerStateForSong(state) {
		return state.Songs[state.CurrentSongIndex].ThumbnailUrl
	} else {
		return fallback
	}
}

templ collapsedPlayer() {
	<div class={ "flex", "flex-col", "md:mx-3" }>
		<!-- seeker, time, and volume -->
		<div
			class={ "w-full", "flex", "flex-row-reverse", "md:flex-row", "gap-x-2", "md:my-1" }
		>
			<span id="song-current-time">00:00</span>
			<input
				id="song-seek-bar"
				type="range"
				min="0"
				max={ psDuration(ps(ctx), "0") }
				value="0"
				class={ "w-full", "md:w-fit" }
			/>
			@ui.DesktopOnly() {
				<span id="song-duration">{ psDurationStr(ps(ctx), "00:00") }</span>
			}
		</div>
		<!-- details & controls -->
		<div
			class={ "h-full", "flex", "justify-between", "items-center", "gap-x-2", "md:gap-x-5", }
		>
			<!-- details -->
			<div
				class={ "flex", "justify-between", "items-center", "gap-x-5", }
			>
				<div
					id="song-image"
					class={
						"w-[35px]", "h-[35px]", "rounded-[3px]",
						"md:w-[50px]", "md:h-[50px]", "md:rounded-md", "bg-primary",
						"bg-repeat", "bg-cover", "bg-center",
						playerSongThumb(psThumnailUrl(ps(ctx), "/static/images/album-cover-icon.svg")),
					}
				></div>
				<div
					class={
						"flex", "flex-col", "justify-center",
						"min-w-[100px]", "max-w-[250px]", "md:max-w-[275px]",
					}
				>
					<p class={ "w-full marquee" }>
						<span id="song-name">
							{ psSongName(ps(ctx), "Play a song...") }
						</span>
					</p>
					@ui.DesktopOnly() {
						<p class={ "hidden", "md:inline-block", "w-full" }>
							<span id="artist-name">
								{ psArtistName(ps(ctx), "") }
							</span>
						</p>
					}
				</div>
				@ui.DesktopOnly() {
					<div>
						@menus.PopoverUp("Player's current song options", icons.Options(), playerSongMenu(), 400)
					</div>
				}
			</div>
			<!-- controls -->
			<div class={ "flex", "rounded-r", "items-center", "gap-x-0", "lg:mr-[200px]" }>
				@ui.DesktopOnly() {
					@ShuffleButton(psShuffled(ps(ctx)))
					@PreviousButton()
				}
				<button
					id="play"
					type="button"
					title="Play/Pause"
					_="on click call Player.playPauseMuzikk()"
					if !checkPlayerStateForSong(ps(ctx)) {
						disabled
					}
				>
					@icons.Play()
				</button>
				@ui.DesktopOnly() {
					@NextButton()
					@LoopButton(psLoopMode(ps(ctx)))
				}
			</div>
			@ui.DesktopOnly() {
				<div class={ "flex", "items-center", "gap-x-0" }>
					@menus.PopoverUp("Volume", volumeButton(), volumeSeeker(), 45)
					@menus.PopoverUp("Playback Speed", playbackSpeedButton(), playbackSpeedMenu(), 440)
					@ExpandButton()
				</div>
			}
		</div>
	</div>
}

templ ExpandButton() {
	<button
		id="expand-desktop"
		type="button"
		title="Expand!"
		class={ "p-1", "py-2", "mx-1" , "rounded-md" }
		_="on click call PlayerUI.toggleExpandDesktop() end"
	>
		@icons.ArrowUp()
	</button>
}

templ PreviousButton() {
	<button
		id="prev"
		type="button"
		title="Previous song"
		_="on click fetch /api/player/song/previous as json
then if result.end_of_queue then call Player.stopMuzikk() else call playSong(result.song) then call PlayerUI.setLoadingOn() end
catch error
    console.error(';', error)"
		if !checkPlayerStateForSong(ps(ctx)) {
			disabled
		}
	>
		<svg class={ "w-[50px]" } width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path fill-rule="evenodd" clip-rule="evenodd" d="M26.1119 10.8769L16.3915 18.2226C15.7561 18.6753 15.3789 19.4072 15.3789 20.1872C15.3789 20.9674 15.7561 21.6992 16.3915 22.1518L26.1119 30.181C26.9332 30.8376 28.0483 30.9912 29.0165 30.581C29.9847 30.171 30.6502 29.2632 30.75 28.2164V12.8414C30.6502 11.7947 29.9847 10.8869 29.0165 10.4768C28.0483 10.0667 26.9332 10.2203 26.1119 10.8769Z" stroke="var(--secondary-color)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M10.25 10.2791V30.7791" stroke="var(--secondary-color)" stroke-width="5" stroke-linecap="round"></path>
		</svg>
	</button>
}

templ NextButton() {
	<button
		id="next"
		type="button"
		title="Next song"
		_="on click fetch /api/player/song/next as json
then if result.end_of_queue then call Player.stopMuzikk() else call playSong(result.song) then call PlayerUI.setLoadingOn() end
catch error
    console.error(';', error)"
		if !checkPlayerStateForSong(ps(ctx)) {
			disabled
		}
	>
		<svg class={ "w-[50px]" } width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path fill-rule="evenodd" clip-rule="evenodd" d="M14.8881 10.8769L24.6085 18.2226C25.2439 18.6753 25.6211 19.4072 25.6211 20.1872C25.6211 20.9674 25.2439 21.6992 24.6085 22.1518L14.8881 30.181C14.0668 30.8376 12.9517 30.9912 11.9835 30.581C11.0153 30.171 10.3498 29.2632 10.25 28.2164V12.8414C10.3498 11.7947 11.0153 10.8869 11.9835 10.4768C12.9517 10.0667 14.0668 10.2203 14.8881 10.8769Z" stroke="var(--secondary-color)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path>
			<path d="M30.75 10.2791V30.7791" stroke="var(--secondary-color)" stroke-width="5" stroke-linecap="round"></path>
		</svg>
	</button>
}

templ LoopButton(currentLoopMode string) {
	// 			if !checkPlayerStateForSong(ps(ctx))  {
	// 				disabled
	// 			}
	<button
		id="loop"
		type="button"
		title="Loop"
		if currentLoopMode == "all" {
			hx-put="/api/player/loop/off"
			hx-swap="outerHTML"
		}
		else
		if currentLoopMode == "once" {
			hx-put="/api/player/loop/all"
			hx-swap="outerHTML"
		} else {
			hx-put="/api/player/loop/once"
			hx-swap="outerHTML"
		}
	>
		switch currentLoopMode {
			case "all":
				@icons.LoopAll()
			case "once":
				@icons.LoopOnce()
			case "off":
				@icons.LoopOff()
			default:
				@icons.LoopOff()
		}
	</button>
}

templ ShuffleButton(shuffled bool) {
	//	if !checkPlayerStateForSong(ps(ctx)) {
	//		disabled
	//	}
	<button
		id="shuffle"
		type="button"
		title="Shuffle"
		if shuffled {
			hx-delete="/api/player/shuffle"
			hx-swap="outerHTML"
		} else {
			hx-post="/api/player/shuffle"
			hx-swap="outerHTML"
		}
	>
		if shuffled {
			@icons.ShuffleOn()
		} else {
			@icons.ShuffleOff()
		}
	</button>
}

templ volumeButton() {
	<svg class={ "px-1" } width="30" height="27" viewBox="0 0 30 27" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path d="M21.2255 8.88121C22.1845 10.1678 22.7527 11.7671 22.7527 13.5C22.7527 15.233 22.1845 16.8322 21.2255 18.1188M24.2804 3.17187C27.0934 5.70907 28.8638 9.39621 28.8638 13.5C28.8638 17.6038 27.0934 21.2909 24.2804 23.8282M3.80821 8.88121H5.18505C6.02675 8.88121 6.44759 8.88121 6.83757 8.77547C7.18312 8.68179 7.50964 8.52767 7.80227 8.32013C8.13254 8.08591 8.40195 7.7601 8.9408 7.1085L12.9526 2.25705C13.6182 1.45212 13.951 1.04965 14.2417 1.00776C14.4935 0.971486 14.7466 1.06386 14.917 1.25414C15.1138 1.47387 15.1138 1.99777 15.1138 3.04556V23.9544C15.1138 25.0023 15.1138 25.5262 14.917 25.7459C14.7466 25.9362 14.4935 26.0286 14.2417 25.9922C13.9511 25.9503 13.6182 25.5479 12.9526 24.743L8.9408 19.8915C8.40195 19.24 8.13254 18.914 7.80227 18.6799C7.50964 18.4723 7.18312 18.3182 6.83757 18.2246C6.44759 18.1188 6.02675 18.1188 5.18505 18.1188H3.80821C2.95258 18.1188 2.52476 18.1188 2.19795 17.951C1.91048 17.8034 1.67677 17.5678 1.53028 17.2782C1.36377 16.9489 1.36377 16.5177 1.36377 15.6555V11.3446C1.36377 10.4823 1.36377 10.0512 1.53028 9.72183C1.67677 9.43214 1.91048 9.19661 2.19795 9.04901C2.52476 8.88121 2.95258 8.88121 3.80821 8.88121Z" stroke="var(--secondary-color)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
	</svg>
}

templ volumeSeeker() {
	<div class={ "bg-secondary-trans-20", "backdrop-blur-lg", "shadow-xs", "shadow-secondary", "p-2", "rounded-md" }>
		<input
			id="volume-seek-bar"
			type="range"
			min="0"
			max="100"
			value="100"
			class={ "my-1", "w-full", }
		/>
	</div>
}

templ playbackSpeedButton() {
	@icons.PlaybackSpeed()
}

templ playbackSpeedMenu() {
	<div
		class={
			"min-w-[250px]", "bg-accent-trans-20", "p-[10px]", "rounded-[10px]",
			"flex", "flex-col", "gap-y-1", "backdrop-blur-lg",
		}
	>
		<h3 class={ "text-lg", "font-medium" }>Playback Speed</h3>
		<hr/>
		for _, speed := range []float32{0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2} {
			<button
				class={
					"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
					"flex", "items-center", "gap-x-2", "w-full", "font-bold",
				}
				title={ fmt.Sprintf("Change playback speed to %.2f", speed) }
				type="button"
				_={ fmt.Sprintf("on click Player.setPlaybackSpeed('%f')", speed) }
			>
				@icons.PlaybackSpeed()
				x{ fmt.Sprint(speed) }
			</button>
		}
	</div>
}

templ playerSongMenu() {
	<div
		class={ "min-h-10", "h-auto", "mb-[20px]", "ding" }
		hx-get="/api/player/song"
		hx-swap="innerHTML"
		hx-trigger="intersect threshold:1"
		data-hx-revealed="true"
		data-loading-target="#current-song-loading"
		data-loading-class-remove="hidden"
		data-loading-path="/api/player/song"
	></div>
	<div id="current-song-loading" class={ "hidden", "w-full", "flex", "justify-center" }>
		<div class={ "loader", "!h-20", "!w-20" }></div>
	</div>
}

css playerSongThumb(url string) {
	background-image: { fmt.Sprintf("url(\"%s\")", url) };
}
