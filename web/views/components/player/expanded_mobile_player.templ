package player

import (
	"dankmuzikk-web/views/components/menus"
	"dankmuzikk-web/views/icons"
)

templ expandedMobilePlayerControls() {
	<div id="expanded-mobile-player-controls" class={ "flex", "flex-col", "justify-center", "gap-y-[20px]", "p-[20px]", "h-full" }>
		<!-- foto -->
		<div class={ "flex", "justify-center", "items-center" }>
			<div
				id="song-image-expanded"
				class={
					"w-[200px]", "h-[200px]", "rounded-[3px]", "bg-primary",
					"bg-repeat", "bg-cover", "bg-center", "bg-[url('/static/images/album-cover-icon.svg')]",
					playerSongThumb(psThumnailUrl(ps(ctx), "/static/images/album-cover-icon.svg")),
				}
			></div>
		</div>
		<!-- details -->
		<div class={ "flex", "justify-center", "items-center" }>
			<div class={ "flex", "flex-col", "justify-center", "min-w-[100px]", "max-w-[250px]" }>
				<p class={ "font-Ubuntu", "w-full", "text-center" , "marquee" }>
					<span id="song-name-expanded">{ psSongName(ps(ctx), "Play a song...") }</span>
				</p>
				<p id="artist-name-expanded" class={ "w-full", "text-center" }>{ psArtistName(ps(ctx), "") }</p>
			</div>
		</div>
		<!-- controls -->
		<div class={ "flex", "justify-center", "items-center", "w-full" }>
			@ShuffleButton(psShuffled(ps(ctx)))
			@PreviousButton()
			<button
				id="play-expand"
				type="button"
				title="Play/Pause"
				_="on click call Player.playPauseMuzikk()"
				if !checkPlayerStateForSong(ps(ctx)) {
					disabled
				}
			>
				@icons.Play()
			</button>
			@NextButton()
			@LoopButton(psLoopMode(ps(ctx)))
		</div>
		<div class={ "w-full", "flex", "flex-col", "items-center", "gap-y-3" }>
			<div class={ "w-full", "flex", "items-center", "gap-x-2" }>
				<span id="song-current-time-expanded">00:00</span>
				<input
					id="song-seek-bar-expanded"
					type="range"
					min="0"
					max={ psDuration(ps(ctx), "0") }
					value="0"
					class={ "my-2", "w-full" }
				/>
				<span id="song-duration-expanded">{ psDurationStr(ps(ctx), "00:00") }</span>
			</div>
			<div
				class={
					"w-2/3", "flex", "items-center", "justify-between", "gap-x-3", "px-2",
					"bg-secondary-trans-30", "rounded-md",
				}
			>
				@menus.MobileMenu("Player's current song options", icons.About(), playerSongMenu())
				@menus.MobileMenu("Playback Speed", icons.PlaybackSpeed(), playbackSpeedMenu())
			</div>
		</div>
	</div>
}

templ expandedMobilePlayerLyrics() {
	<div
		id="expanded-mobile-player-lyrics"
		class={
			"w-full", "overflow-y-scroll", "max-h-[475px]",
			"hidden", "flex-col", "gap-y-1", "p-2",
		}
		_="on touchmove event.stopImmediatePropagation() end"
	>
		<div
			id="current-song-lyrics"
			data-hx-revealed="true"
			data-loading-target="#lyrics-loading"
			data-loading-class-remove="hidden"
		></div>
		<div id="lyrics-loading" class={ "hidden", "w-full", "flex", "justify-center" }>
			<div class={ "loader", "!h-20", "!w-20" }></div>
		</div>
	</div>
}

templ expandedMobilePlayerQueue() {
	<div
		id="expanded-mobile-player-queue"
		class={
			"w-full", "overflow-y-scroll", "h-[475px]",
			"hidden", "flex-col", "gap-y-1",
		}
		_="on touchmove event.stopImmediatePropagation()"
	>
		<div
			id="current-songs-queue"
			data-hx-revealed="true"
			data-loading-target="#songs-queue-loading"
			data-loading-class-remove="hidden"
		></div>
		<div id="songs-queue-loading" class={ "hidden", "w-full", "flex", "justify-center" }>
			<div class={ "loader", "!h-20", "!w-20" }></div>
		</div>
	</div>
}

templ expandedMobilePlayer() {
	<div class={ "flex", "flex-col", "justify-between", "h-full" }>
		<div class={ "h-max" }>
			@expandedMobilePlayerControls()
			@expandedMobilePlayerLyrics()
			@expandedMobilePlayerQueue()
		</div>
		<!-- tabs blyat -->
		<div class={ "flex", "justify-center", "items-center", "gap-x-8", "w-full", "tabs" }>
			<input
				type="radio"
				name="tab"
				id="mobile-controls-tab"
				checked
				_="on click
    remove .hidden from #expanded-mobile-player-controls
    show #expanded-mobile-player-controls with *display
    hide #expanded-mobile-player-lyrics with *display
    hide #expanded-mobile-player-queue with *display
end"
			/>
			<label for="mobile-controls-tab">Controls</label>
			<input
				type="radio"
				name="tab"
				id="mobile-lyrics-tab"
				hx-get="/api/player/song/lyrics"
				hx-trigger="click"
				hx-target="#current-song-lyrics"
				hx-swap="innerHTML"
				_="on click
    remove .hidden from #expanded-mobile-player-lyrics
    show #expanded-mobile-player-lyrics with *display
    hide #expanded-mobile-player-controls with *display
    hide #expanded-mobile-player-queue with *display
end"
			/>
			<label for="mobile-lyrics-tab">Lyrics</label>
			<input
				id="mobile-queue-tab"
				type="radio"
				name="tab"
				hx-get="/api/player/queue"
				hx-trigger="click"
				hx-target="#current-songs-queue"
				hx-swap="innerHTML"
				_="on click
    remove .hidden from #expanded-mobile-player-queue
    show #expanded-mobile-player-queue with *display
    hide #expanded-mobile-player-controls with *display
    hide #expanded-mobile-player-lyrics with *display
end"
			/>
			<label for="mobile-queue-tab">Queue</label>
		</div>
	</div>
}
