package song

import (
	"dankmuzikk-web/actions"
	"dankmuzikk-web/views/components/menus"
	"dankmuzikk-web/views/components/ui"
	"dankmuzikk-web/views/icons"
	"fmt"
	"math/rand"
)

templ Song(s actions.Song, additionalData []string, additionalOptions []templ.Component, playlist actions.Playlist) {
	<div
		if playlist.PublicId != "" {
			id={ "song-" + s.PublicId }
		}
		class={
			"!font-Ubuntu", "w-full", "bg-[#ffffff00]", "flex", "justify-between",
			"rounded-xl", "gap-x-2", "md:gap-x-5", "xl:gap-x-10", "p-2",
		}
	>
		<div class={ "w-full", "flex", "gap-x-4", "md:gap-x-6" }>
			<!-- thumbnail and duration -->
			<div
				class={ "w-[80px]",  "h-[80px]", "md:w-[70px]", "md:h-[70px]", "relative", "cursor-pointer" }
				if playlist.PublicId != "" {
					onClick={ playSongFromPlaylist(s.PublicId, playlist.PublicId) }
				} else {
					onClick={ playSong(s.PublicId) }
				}
			>
				<div
					class={
						"w-[80px]", "h-[80px]", "md:w-[70px]", "md:h-[70px]", "rounded-md", "bg-primary",
						"bg-repeat", "bg-cover", "bg-center", songThumb(fmt.Sprintf("url(\"%s\")", s.ThumbnailUrl)),
					}
				></div>
				<div
					class={ "absolute", "bottom-0", "flex", "justify-center", "w-full", }
				>
					<p
						class={
							"leading-3", "bg-[#000000ab]", "rounded-xs",
							"text-white", "text-sm", "md:text-md", "font-light", "m-2", "p-[6px]",
						}
					>
						{ s.Duration() }
					</p>
				</div>
			</div>
			<!-- title, channel title, and description -->
			<div class={ "w-[165px]", "md:w-[330px]", "lg:min-w-[450px]", "xl:min-w-[650px]" }>
				<div
					class={ "w-full", "h-full", "flex", "gap-y-3", "items-start", "flex-col",  "font-Ubuntu", "text-secondary", "cursor-pointer" }
					if playlist.PublicId != "" {
						onClick={ playSongFromPlaylist(s.PublicId, playlist.PublicId) }
					} else {
						onClick={ playSong(s.PublicId) }
					}
				>
					<h3
						class={ "w-full", "text-[16px]", "md:text-xl", "font-bold", "overflow-hidden", "text-nowrap", "text-ellipsis" }
						title={ s.Title }
					>
						{ s.Title }
					</h3>
					<div class={ "flex", "flex-col", "lg:flex-row", "gap-x-2", "gap-y-1", "lg:gap-y-2", "w-auto", "justify-start" }>
						<p class={ "w-fit", "text-sm", "font-normal" }>By { s.Artist }</p>
						for i, info := range additionalData {
							if i < len(additionalData) && info != "" {
								<span class={ "hidden", "lg:flex", "justify-center", "items-center", "text-lg", "h-[20px]" }>â€¢</span>
							}
							if info != "" {
								<p class={ "w-fit", "text-sm", "font-normal" }>{ info }</p>
							}
						}
					</div>
				</div>
			</div>
		</div>
		<!-- actions -->
		<div class={ "lg:me-3", "flex", "items-center", "lg:gap-x-4" }>
			@ui.MobileOnly() {
				@menus.MobileMenu(s.PublicId+fmt.Sprint(rand.Int()), "Song's options", icons.Options(), options(s, additionalOptions))
			}
			@ui.DesktopOnly() {
				@menus.Popover(s.PublicId+fmt.Sprint(rand.Int()), "Song's options", icons.Options(), options(s, additionalOptions))
			}
		</div>
	</div>
}

templ AddToFavoritesButton(songId string) {
	<button
		class={
			"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
			"flex", "items-center", "gap-x-2", "w-full",
		}
		title="Add to Favorites"
		type="button"
		hx-post={ fmt.Sprintf("/api/library/favorite/song?id=%s", songId) }
		hx-swap="outerHTML"
		hx-trigger="click"
		hx-target="this"
		data-loading-target="#loading"
		data-loading-class-remove="hidden"
		data-loading-path={ fmt.Sprintf("/api/library/favorite/song?id=%s", songId) }
	>
		@icons.Favorites()
		<span>Add to Favorites</span>
	</button>
}

templ RemoveFromFavoritesButton(songId string) {
	<button
		class={
			"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
			"flex", "items-center", "gap-x-2", "w-full",
		}
		title="Remove from Favorites"
		type="button"
		hx-delete={ fmt.Sprintf("/api/library/favorite/song?id=%s", songId) }
		hx-swap="outerHTML"
		hx-trigger="click"
		hx-target="this"
		data-loading-target="#loading"
		data-loading-class-remove="hidden"
		data-loading-path={ fmt.Sprintf("/api/library/favorite/song?id=%s", songId) }
	>
		@icons.FavoritesFilled()
		<span>Remove from Favorites</span>
	</button>
}

templ options(song actions.Song, additionalOptions []templ.Component) {
	<div
		class={
			"min-w-[250px]", "bg-accent-trans-20", "p-[15px]", "rounded-[10px]",
			"flex", "flex-col", "gap-y-2", "backdrop-blur-lg",
		}
	>
		<h3 class={ "text-lg", "font-medium" }>{ song.Title }</h3>
		<hr/>
		for _, option := range additionalOptions {
			@option
		}
		if song.Favorite {
			@RemoveFromFavoritesButton(song.PublicId)
		} else {
			@AddToFavoritesButton(song.PublicId)
		}
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Share song"
			type="button"
			onClick={ shareSong(song.PublicId) }
		>
			@icons.ShareLink()
			<span>Share song</span>
		</button>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Add song to queue"
			type="button"
			onClick={ addSongToQueue(song.PublicId) }
		>
			@icons.AddToQueue()
			<span>Add to queue</span>
		</button>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Play next"
			type="button"
			onClick={ playSongNext(song.PublicId) }
		>
			@icons.AddToQueue()
			<span>Play next</span>
		</button>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Download song"
			type="button"
			onClick={ downloadSong(song.PublicId, song.Title) }
		>
			@icons.Download()
			<span>Download to device</span>
		</button>
	</div>
}

css songThumb(url string) {
	background-image: { url };
}

script downloadSong(songPublicId, songTitle string) {
    Player.downloadSongToDevice(songPublicId, songTitle)
}

script addSongToQueue(songPublicId string) {
    window.Player.addSongToQueueId(songPublicId);
}

script playSong(songPublicId string) {
    window.Player.playSingleSongId(songPublicId);
}

script playSongFromPlaylist(songId, playlistPubId string) {
    window.Player.playSongFromPlaylistId(songId, playlistPubId)
}

script playSongNext(songPublicId string) {
    Player.playSingleSongNextId(songPublicId)
}

script shareSong(songPublicId string) {
    window.Utils.copyTextToClipboard(`${location.protocol}//${location.host}/song/${songPublicId}`)
    alert("Song's links was copied!");
}
