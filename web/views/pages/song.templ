package pages

import (
	"dankmuzikk-web/actions"
	"dankmuzikk-web/views/components/menus"
	"dankmuzikk-web/views/components/page"
	"dankmuzikk-web/views/components/playlist"
	"dankmuzikk-web/views/components/ui"
	"dankmuzikk-web/views/icons"
	"fmt"
	"math/rand"
)

templ Song(song actions.Song) {
	@page.Container(templ.NopComponent, songContent(song))
}

templ songContent(song actions.Song) {
	<div class={ "flex", "flex-col", "justify-center", "items-center", "gap-6" }>
		<div
			class={
				"w-[250px]", "h-[250px]", "rounded-md", "bg-primary",
				"bg-repeat", "bg-cover", "bg-center", songThumb(fmt.Sprintf("url(\"%s\")", song.ThumbnailUrl)),
			}
		></div>
		<div class={ "w-full", "flex", "justify-center", "items-center", "gap-3" }>
			<button
				class={
					"p-2", "px-4", "rounded-md", "bg-accent-trans-20", "hover:bg-accent-trans-30",
					"flex", "gap-x-2", "items-center", "justify-center", "font-semibold", "min-w-[200px]",
				}
				title="Play now"
				type="button"
				onClick={ playSong(song) }
			>
				<span>Play now</span>
			</button>
			@ui.MobileOnly() {
				@menus.MobileMenu(song.PublicId+fmt.Sprint(rand.Int()), "Song's options", icons.Options(), options(song))
			}
			@ui.DesktopOnly() {
				@menus.Popover(song.PublicId+fmt.Sprint(rand.Int()), "Song's options", icons.Options(), options(song))
			}
		</div>
		<h1 class={ "text-secondary", "text-xl", "lg:text-4xl" }>{ song.Title }</h1>
		<p class={ "text-secondary", "text-md" }>By { song.Artist }</p>
		<p class={ "text-secondary", "text-md" }>Duration { song.Duration }</p>
	</div>
}

// TODO: generalize this and the same shit under components/song/song.templ
templ options(song actions.Song) {
	<div
		class={
			"flex", "flex-col", "gap-y-1", "p-2", "rounded-md", "min-w-[250px]",
			"bg-secondary-trans-20", "backdrop-blur-lg", "shadow-xs", "shadow-accent",
		}
	>
		@playlist.PlaylistsPopup(0, song.PublicId)
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Share song"
			type="button"
			onClick={ shareSong(song.PublicId) }
		>
			@icons.ShareLink()
			<span>Share song</span>
		</button>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Add song to queue"
			type="button"
			onClick={ addSongToQueue(song) }
		>
			@icons.AddToQueue()
			<span>Add to queue</span>
		</button>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Play next"
			type="button"
			onClick={ playSongNext(song) }
		>
			@icons.AddToQueue()
			<span>Play next</span>
		</button>
		<button
			class={
				"popover-trigger", "p-2", "rounded-md", "hover:bg-accent-trans-20",
				"flex", "items-center", "gap-x-2", "w-full",
			}
			title="Download song"
			type="button"
			onClick={ downloadSong(song.PublicId, song.Title) }
		>
			@icons.Download()
			<span>Download to device</span>
		</button>
	</div>
}

script playSong(song actions.Song) {
    Player.playSingleSong(song)
}

script playSongNext(song actions.Song) {
    Player.playSingleSongNext(song)
}

script shareSong(songPublicId string) {
    window.Utils.copyTextToClipboard(`${location.protocol}//${location.host}/song/${songPublicId}`)
    alert("Song's links was copied!");
}

script addSongToQueue(song actions.Song) {
    window.Player.addSongToQueue(song);
}

script downloadSong(songPublicId, songTitle string) {
    Player.downloadSongToDevice(songPublicId, songTitle)
}
