package layouts

import (
	"dankmuzikk-web/views/components/header"
	"dankmuzikk-web/views/components/loading"
	"dankmuzikk-web/views/components/mobilenav"
	"dankmuzikk-web/views/components/player"
	"dankmuzikk-web/views/icons"
	"fmt"
)

templ Default(props PageProps, children ...templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<title>{ props.Title } - DankMuzikk</title>
			<link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png"/>
			<link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32x32.png"/>
			<link rel="icon" type="image/png" sizes="192x192" href="/static/android-chrome-192x192.png"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16x16.png"/>
			<link rel="manifest" href="/static/site.webmanifest"/>
			<link rel="mask-icon" href="/static/safari-pinned-tab.svg" color="#000000"/>
			<meta name="msapplication-TileColor" content="#000000"/>
			<meta name="theme-color" content="#000000"/>
			<meta
				name="viewport"
				content="width=device-width, initial-scale=1, maximum-scale=2, user-scalable=yes"
			/>
			<meta name="description" content="Create, Share and Play Music Playlists."/>
			<meta name="og:title" content={ props.Title + " - DankMuzikk" }/>
			<meta name="og:description" content="Create, Share and Play Music Playlists."/>
			<meta property="og:site_name" content="DankMuzikk"/>
			if props.Audio.Url != "" {
				<meta property="og:audio" content={ props.Audio.Url }/>
			}
			if  props.Audio.Duration  != "" {
				<meta property="music:duration" content={ props.Audio.Duration }/>
			}
			if  props.Audio.Album  != "" {
				<meta property="music:album" content={ props.Audio.Album }/>
			}
			if props.Audio.Musician  != "" {
				<meta property="music:musician" content={ props.Audio.Musician }/>
			}
			if  props.Type  != "" {
				<meta property="og:type" content={ string(props.Type) }/>
			}
			if props.Url  != "" {
				<meta property="og:url" content={ props.Url }/>
			}
			if props.ImageUrl  != "" {
				<meta property="og:image" content={ props.ImageUrl }/>
			}
			<meta
				name="keywords"
				content="dankmuzikk-web,dank,dank music,music,music playlist,share playlist,group playlist"
			/>
			<link
				defer
				rel="stylesheet"
				type="text/css"
				href="/static/css/player-seeker.css"
			/>
			<link
				defer
				rel="stylesheet"
				type="text/css"
				href="/static/css/ubuntu-font.css"
			/>
			<link defer href="/static/css/refresher.css" rel="stylesheet"/>
			<link href="/static/css/tailwind.css" rel="stylesheet"/>
			<link href={ fmt.Sprintf("/static/css/themes/%s.css", ctx.Value("theme-name").(string)) } rel="stylesheet"/>
			<script src="/static/js/htmx/htmx.min.js"></script>
			<script defer src="/static/js/htmx/json-enc.js"></script>
			<script defer src="/static/js/htmx/loading-states.js"></script>
			<script type="text/hyperscript" src="/static/hs/player._hs"></script>
			<script type="text/hyperscript" src="/static/hs/player_ui._hs"></script>
			<script src="/static/js/htmx/hyperscript.min.js"></script>
		</head>
		<body
			hx-ext="loading-states"
			class={ "min-w-[360px]", "min-h-screen", "p-0", "m-0", "font-Ubuntu", "bg-primary" }
		>
			<!-- onload={ templ.JSFuncCall("setCdnUrl", config.GetCdnUrl()) } -->
			@header.Header()
			<div class="refresher">
				<div class="loading-bar"></div>
				<div class="loading-bar"></div>
				<div class="loading-bar"></div>
				<div class="loading-bar"></div>
			</div>
			<div id="main-contents" class={ "contents" }>
				for _, child := range children {
					@child
				}
			</div>
			<!--
                For when opened on a desktop and the client's width is really small,
                and a similar thing isn't being done for mobile, since mobile clients can't change width w/o reloading.
                And since desktops don't really mind rendering the same shit twice.
            -->
			<div class={ "contents", "md:hidden" }>
				@mobilenav.MobileNav()
			</div>
			<div id="loading" class="hidden">
				@loading.Loading()
			</div>
			@player.PlayerSticky()
			@icons.IconsLoader()
			<input id="clipboard-text-blyat" type="text" hidden/>
			//
			<script defer src="/static/js/utils.js"></script>
			<script defer src="/static/js/router.js"></script>
			<script defer src="/static/js/refresher.js"></script>
			<script defer src="/static/js/theme.js"></script>
			<script type="module">
			    function registerServiceWorkers() {
			    	if (!("serviceWorker" in navigator)) {
			    		console.error("Browser doesn't support service workers");
			    		return;
			    	}
			    	window.addEventListener("load", () => {
			    		navigator.serviceWorker
			    			.register("/static/js/service-worker.js")
			    			.then((reg) => {
			    				console.log("Service Worker Registered", reg);
			    			})
			    			.catch((err) => {
			    				console.error("Service Worker Registration failed:", err);
			    			});
		                });
			    }
			    registerServiceWorkers();
		    </script>
		</body>
	</html>
}
